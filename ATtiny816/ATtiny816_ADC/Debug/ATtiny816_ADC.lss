
ATtiny816_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000596  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00803e00  00803e00  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000678  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c8c  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dfa  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6f  00000000  00000000  00005296  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00005f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001512  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c2  00000000  00000000  0000760e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 30       	cpi	r26, 0x05	; 5
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	43 d0       	rcall	.+134    	; 0xd8 <main>
  52:	9f c2       	rjmp	.+1342   	; 0x592 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  56:	9d d0       	rcall	.+314    	; 0x192 <system_init>
  58:	08 95       	ret

0000005a <measure_voltage>:
* \param[in]	adc_channel: ADC input pin. 
*
* \return		Nothing
*/
void measure_voltage(ADC_MUXPOS_t adc_channel) {
	switch(adc_state) {
  5a:	90 91 04 3e 	lds	r25, 0x3E04	; 0x803e04 <adc_state>
  5e:	91 30       	cpi	r25, 0x01	; 1
  60:	49 f0       	breq	.+18     	; 0x74 <measure_voltage+0x1a>
  62:	18 f0       	brcs	.+6      	; 0x6a <measure_voltage+0x10>
  64:	92 30       	cpi	r25, 0x02	; 2
  66:	69 f0       	breq	.+26     	; 0x82 <__EEPROM_REGION_LENGTH__+0x2>
  68:	08 95       	ret
		case 0:
			// Select the ADC channel to start a single conversion on,
			ADC_0_start_conversion(adc_channel);
  6a:	4f d0       	rcall	.+158    	; 0x10a <ADC_0_start_conversion>
			// Change state.
			adc_state = 1;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <adc_state>
			break;
  72:	08 95       	ret
		case 1:
			// Check if conversion is done and change to next state.
			if(ADC_0_is_conversion_done()) {
  74:	50 d0       	rcall	.+160    	; 0x116 <ADC_0_is_conversion_done>
  76:	88 23       	and	r24, r24
  78:	71 f1       	breq	.+92     	; 0xd6 <__EEPROM_REGION_LENGTH__+0x56>
				adc_state = 2;
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <adc_state>
  80:	08 95       	ret
			}
			break;
		case 2:
			// Get conversion from specified ADC channel.
			result = ADC_0_get_conversion_result();
  82:	4d d0       	rcall	.+154    	; 0x11e <ADC_0_get_conversion_result>
  84:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <result>
  88:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <result+0x1>
			// Calculate the input voltage on the ADC pin.
			// 5000.0 is the VREF (5V) in mV and 1023 is the resolution of 10 bits.
			voltage = (result * 5000.0) / 1023;
			// R1 and R2 are the voltage divider resistors
			voltage = (voltage * (R1 + R2)) / R2;
  8c:	bc 01       	movw	r22, r24
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	30 d1       	rcall	.+608    	; 0x2f4 <__floatunsisf>
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e4       	ldi	r19, 0x40	; 64
  98:	4c e9       	ldi	r20, 0x9C	; 156
  9a:	55 e4       	ldi	r21, 0x45	; 69
  9c:	b9 d1       	rcall	.+882    	; 0x410 <__mulsf3>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 ec       	ldi	r19, 0xC0	; 192
  a2:	4f e7       	ldi	r20, 0x7F	; 127
  a4:	54 e4       	ldi	r21, 0x44	; 68
  a6:	85 d0       	rcall	.+266    	; 0x1b2 <__divsf3>
  a8:	f6 d0       	rcall	.+492    	; 0x296 <__fixunssfsi>
  aa:	db 01       	movw	r26, r22
  ac:	20 e8       	ldi	r18, 0x80	; 128
  ae:	3a e1       	ldi	r19, 0x1A	; 26
  b0:	46 e0       	ldi	r20, 0x06	; 6
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	36 d2       	rcall	.+1132   	; 0x522 <__muluhisi3>
  b6:	20 e4       	ldi	r18, 0x40	; 64
  b8:	3d e0       	ldi	r19, 0x0D	; 13
  ba:	43 e0       	ldi	r20, 0x03	; 3
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	15 d2       	rcall	.+1066   	; 0x4ea <__divmodsi4>
  c0:	20 93 00 3e 	sts	0x3E00, r18	; 0x803e00 <__DATA_REGION_ORIGIN__>
  c4:	30 93 01 3e 	sts	0x3E01, r19	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
			// Clear the Result Ready Interrupt Flag.
			ADC0.INTFLAGS |= ADC_RESRDY_bm;			
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f6 e0       	ldi	r31, 0x06	; 6
  cc:	83 85       	ldd	r24, Z+11	; 0x0b
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	83 87       	std	Z+11, r24	; 0x0b
			// Change state.
			adc_state = 0;
  d2:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <adc_state>
  d6:	08 95       	ret

000000d8 <main>:


//
int main(void) {
	// Initializes MCU, drivers and middleware
	atmel_start_init();
  d8:	be df       	rcall	.-132    	; 0x56 <atmel_start_init>
	// Enable global interruptions
	sei();
  da:	78 94       	sei
	
	// Initialize variables.
	adc_state = 0;
  dc:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <adc_state>
	result = 0;	
  e0:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <result>
  e4:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <result+0x1>
	voltage = 0;	
  e8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
  ec:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>

	// Main Loop
	while (1) {
		// Measure the voltage on ADC input pin 4 (PA4).
		measure_voltage(ADC_MUXPOS_AIN4_gc);
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	b3 df       	rcall	.-154    	; 0x5a <measure_voltage>
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <main+0x18>

000000f6 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
  f6:	e0 e0       	ldi	r30, 0x00	; 0
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	11 82       	std	Z+1, r1	; 0x01
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	82 83       	std	Z+2, r24	; 0x02
 100:	16 82       	std	Z+6, r1	; 0x06
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	f6 e0       	ldi	r31, 0x06	; 6
 10e:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 87       	std	Z+8, r24	; 0x08
 114:	08 95       	ret

00000116 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 116:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7f860b>
}
 11a:	81 70       	andi	r24, 0x01	; 1
 11c:	08 95       	ret

0000011e <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
 11e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 122:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
}
 126:	08 95       	ret

00000128 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp      /* voltage level monitor interrrupt enable: disabled */
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__RODATA_PM_OFFSET__+0x7f8089>
	              | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret

00000132 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 132:	43 e0       	ldi	r20, 0x03	; 3
 134:	68 ed       	ldi	r22, 0xD8	; 216
 136:	81 e6       	ldi	r24, 0x61	; 97
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	33 d0       	rcall	.+102    	; 0x1a2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret

00000140 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 144:	e0 e1       	ldi	r30, 0x10	; 16
 146:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 14e:	e8 31       	cpi	r30, 0x18	; 24
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	f8 07       	cpc	r31, r24
 154:	c9 f7       	brne	.-14     	; 0x148 <mcu_init+0x4>
 156:	e0 e3       	ldi	r30, 0x30	; 48
 158:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 160:	e8 33       	cpi	r30, 0x38	; 56
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	f8 07       	cpc	r31, r24
 166:	c9 f7       	brne	.-14     	; 0x15a <mcu_init+0x16>
 168:	e0 e5       	ldi	r30, 0x50	; 80
 16a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 16c:	80 81       	ld	r24, Z
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 172:	e8 35       	cpi	r30, 0x58	; 88
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	f8 07       	cpc	r31, r24
 178:	c9 f7       	brne	.-14     	; 0x16c <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 17a:	08 95       	ret

0000017c <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 17c:	e4 e1       	ldi	r30, 0x14	; 20
 17e:	f4 e0       	ldi	r31, 0x04	; 4
 180:	80 81       	ld	r24, Z
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 188:	80 81       	ld	r24, Z
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	80 83       	st	Z, r24
	// Disable digital input buffer
	PA4_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PA4_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 18e:	b3 df       	rcall	.-154    	; 0xf6 <ADC_0_init>
 190:	08 95       	ret

00000192 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 192:	d8 df       	rcall	.-80     	; 0x144 <mcu_init>

	CLKCTRL_init();
 194:	ce df       	rcall	.-100    	; 0x132 <CLKCTRL_init>

	VREF_0_init();
 196:	0b d0       	rcall	.+22     	; 0x1ae <VREF_0_init>

	ADC_0_initialization();
 198:	f1 df       	rcall	.-30     	; 0x17c <ADC_0_initialization>

	CPUINT_init();
 19a:	d2 df       	rcall	.-92     	; 0x140 <CPUINT_init>

	SLPCTRL_init();
 19c:	06 d0       	rcall	.+12     	; 0x1aa <SLPCTRL_init>

	BOD_init();
 19e:	c4 df       	rcall	.-120    	; 0x128 <BOD_init>
 1a0:	08 95       	ret

000001a2 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1a2:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1a4:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1a6:	40 83       	st	Z, r20
	ret                             // Return to caller
 1a8:	08 95       	ret

000001aa <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <VREF_0_init>:

	// VREF_CTRLB = 0 << VREF_ADC0REFEN_bp /* ADC0 reference enable: disabled */
	//		 | 0 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: disabled */

	return 0;
}
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <__divsf3>:
 1b2:	0e 94 ed 00 	call	0x1da	; 0x1da <__divsf3x>
 1b6:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__fp_round>
 1ba:	0e 94 c7 01 	call	0x38e	; 0x38e <__fp_pscB>
 1be:	58 f0       	brcs	.+22     	; 0x1d6 <__divsf3+0x24>
 1c0:	0e 94 c0 01 	call	0x380	; 0x380 <__fp_pscA>
 1c4:	40 f0       	brcs	.+16     	; 0x1d6 <__divsf3+0x24>
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <__divsf3+0x20>
 1c8:	5f 3f       	cpi	r21, 0xFF	; 255
 1ca:	29 f0       	breq	.+10     	; 0x1d6 <__divsf3+0x24>
 1cc:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_inf>
 1d0:	51 11       	cpse	r21, r1
 1d2:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_szero>
 1d6:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_nan>

000001da <__divsf3x>:
 1da:	0e 94 df 01 	call	0x3be	; 0x3be <__fp_split3>
 1de:	68 f3       	brcs	.-38     	; 0x1ba <__divsf3+0x8>

000001e0 <__divsf3_pse>:
 1e0:	99 23       	and	r25, r25
 1e2:	b1 f3       	breq	.-20     	; 0x1d0 <__divsf3+0x1e>
 1e4:	55 23       	and	r21, r21
 1e6:	91 f3       	breq	.-28     	; 0x1cc <__divsf3+0x1a>
 1e8:	95 1b       	sub	r25, r21
 1ea:	55 0b       	sbc	r21, r21
 1ec:	bb 27       	eor	r27, r27
 1ee:	aa 27       	eor	r26, r26
 1f0:	62 17       	cp	r22, r18
 1f2:	73 07       	cpc	r23, r19
 1f4:	84 07       	cpc	r24, r20
 1f6:	38 f0       	brcs	.+14     	; 0x206 <__DATA_REGION_LENGTH__+0x6>
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
 1fa:	5f 4f       	sbci	r21, 0xFF	; 255
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	44 1f       	adc	r20, r20
 202:	aa 1f       	adc	r26, r26
 204:	a9 f3       	breq	.-22     	; 0x1f0 <__divsf3_pse+0x10>
 206:	35 d0       	rcall	.+106    	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 208:	0e 2e       	mov	r0, r30
 20a:	3a f0       	brmi	.+14     	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
 20c:	e0 e8       	ldi	r30, 0x80	; 128
 20e:	32 d0       	rcall	.+100    	; 0x274 <__DATA_REGION_LENGTH__+0x74>
 210:	91 50       	subi	r25, 0x01	; 1
 212:	50 40       	sbci	r21, 0x00	; 0
 214:	e6 95       	lsr	r30
 216:	00 1c       	adc	r0, r0
 218:	ca f7       	brpl	.-14     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
 21a:	2b d0       	rcall	.+86     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 21c:	fe 2f       	mov	r31, r30
 21e:	29 d0       	rcall	.+82     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	bb 1f       	adc	r27, r27
 228:	26 17       	cp	r18, r22
 22a:	37 07       	cpc	r19, r23
 22c:	48 07       	cpc	r20, r24
 22e:	ab 07       	cpc	r26, r27
 230:	b0 e8       	ldi	r27, 0x80	; 128
 232:	09 f0       	breq	.+2      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 234:	bb 0b       	sbc	r27, r27
 236:	80 2d       	mov	r24, r0
 238:	bf 01       	movw	r22, r30
 23a:	ff 27       	eor	r31, r31
 23c:	93 58       	subi	r25, 0x83	; 131
 23e:	5f 4f       	sbci	r21, 0xFF	; 255
 240:	3a f0       	brmi	.+14     	; 0x250 <__DATA_REGION_LENGTH__+0x50>
 242:	9e 3f       	cpi	r25, 0xFE	; 254
 244:	51 05       	cpc	r21, r1
 246:	78 f0       	brcs	.+30     	; 0x266 <__DATA_REGION_LENGTH__+0x66>
 248:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_inf>
 24c:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_szero>
 250:	5f 3f       	cpi	r21, 0xFF	; 255
 252:	e4 f3       	brlt	.-8      	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
 254:	98 3e       	cpi	r25, 0xE8	; 232
 256:	d4 f3       	brlt	.-12     	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
 258:	86 95       	lsr	r24
 25a:	77 95       	ror	r23
 25c:	67 95       	ror	r22
 25e:	b7 95       	ror	r27
 260:	f7 95       	ror	r31
 262:	9f 5f       	subi	r25, 0xFF	; 255
 264:	c9 f7       	brne	.-14     	; 0x258 <__DATA_REGION_LENGTH__+0x58>
 266:	88 0f       	add	r24, r24
 268:	91 1d       	adc	r25, r1
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	97 f9       	bld	r25, 7
 270:	08 95       	ret
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	88 1f       	adc	r24, r24
 27a:	bb 1f       	adc	r27, r27
 27c:	62 17       	cp	r22, r18
 27e:	73 07       	cpc	r23, r19
 280:	84 07       	cpc	r24, r20
 282:	ba 07       	cpc	r27, r26
 284:	20 f0       	brcs	.+8      	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
 286:	62 1b       	sub	r22, r18
 288:	73 0b       	sbc	r23, r19
 28a:	84 0b       	sbc	r24, r20
 28c:	ba 0b       	sbc	r27, r26
 28e:	ee 1f       	adc	r30, r30
 290:	88 f7       	brcc	.-30     	; 0x274 <__DATA_REGION_LENGTH__+0x74>
 292:	e0 95       	com	r30
 294:	08 95       	ret

00000296 <__fixunssfsi>:
 296:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fp_splitA>
 29a:	88 f0       	brcs	.+34     	; 0x2be <__fixunssfsi+0x28>
 29c:	9f 57       	subi	r25, 0x7F	; 127
 29e:	98 f0       	brcs	.+38     	; 0x2c6 <__fixunssfsi+0x30>
 2a0:	b9 2f       	mov	r27, r25
 2a2:	99 27       	eor	r25, r25
 2a4:	b7 51       	subi	r27, 0x17	; 23
 2a6:	b0 f0       	brcs	.+44     	; 0x2d4 <__fixunssfsi+0x3e>
 2a8:	e1 f0       	breq	.+56     	; 0x2e2 <__fixunssfsi+0x4c>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	1a f0       	brmi	.+6      	; 0x2ba <__fixunssfsi+0x24>
 2b4:	ba 95       	dec	r27
 2b6:	c9 f7       	brne	.-14     	; 0x2aa <__fixunssfsi+0x14>
 2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <__fixunssfsi+0x4c>
 2ba:	b1 30       	cpi	r27, 0x01	; 1
 2bc:	91 f0       	breq	.+36     	; 0x2e2 <__fixunssfsi+0x4c>
 2be:	0e 94 01 02 	call	0x402	; 0x402 <__fp_zero>
 2c2:	b1 e0       	ldi	r27, 0x01	; 1
 2c4:	08 95       	ret
 2c6:	0c 94 01 02 	jmp	0x402	; 0x402 <__fp_zero>
 2ca:	67 2f       	mov	r22, r23
 2cc:	78 2f       	mov	r23, r24
 2ce:	88 27       	eor	r24, r24
 2d0:	b8 5f       	subi	r27, 0xF8	; 248
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <__fixunssfsi+0x4c>
 2d4:	b9 3f       	cpi	r27, 0xF9	; 249
 2d6:	cc f3       	brlt	.-14     	; 0x2ca <__fixunssfsi+0x34>
 2d8:	86 95       	lsr	r24
 2da:	77 95       	ror	r23
 2dc:	67 95       	ror	r22
 2de:	b3 95       	inc	r27
 2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__fixunssfsi+0x42>
 2e2:	3e f4       	brtc	.+14     	; 0x2f2 <__fixunssfsi+0x5c>
 2e4:	90 95       	com	r25
 2e6:	80 95       	com	r24
 2e8:	70 95       	com	r23
 2ea:	61 95       	neg	r22
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	8f 4f       	sbci	r24, 0xFF	; 255
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	08 95       	ret

000002f4 <__floatunsisf>:
 2f4:	e8 94       	clt
 2f6:	09 c0       	rjmp	.+18     	; 0x30a <__floatsisf+0x12>

000002f8 <__floatsisf>:
 2f8:	97 fb       	bst	r25, 7
 2fa:	3e f4       	brtc	.+14     	; 0x30a <__floatsisf+0x12>
 2fc:	90 95       	com	r25
 2fe:	80 95       	com	r24
 300:	70 95       	com	r23
 302:	61 95       	neg	r22
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	8f 4f       	sbci	r24, 0xFF	; 255
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	99 23       	and	r25, r25
 30c:	a9 f0       	breq	.+42     	; 0x338 <__floatsisf+0x40>
 30e:	f9 2f       	mov	r31, r25
 310:	96 e9       	ldi	r25, 0x96	; 150
 312:	bb 27       	eor	r27, r27
 314:	93 95       	inc	r25
 316:	f6 95       	lsr	r31
 318:	87 95       	ror	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f1 11       	cpse	r31, r1
 322:	f8 cf       	rjmp	.-16     	; 0x314 <__floatsisf+0x1c>
 324:	fa f4       	brpl	.+62     	; 0x364 <__floatsisf+0x6c>
 326:	bb 0f       	add	r27, r27
 328:	11 f4       	brne	.+4      	; 0x32e <__floatsisf+0x36>
 32a:	60 ff       	sbrs	r22, 0
 32c:	1b c0       	rjmp	.+54     	; 0x364 <__floatsisf+0x6c>
 32e:	6f 5f       	subi	r22, 0xFF	; 255
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	16 c0       	rjmp	.+44     	; 0x364 <__floatsisf+0x6c>
 338:	88 23       	and	r24, r24
 33a:	11 f0       	breq	.+4      	; 0x340 <__floatsisf+0x48>
 33c:	96 e9       	ldi	r25, 0x96	; 150
 33e:	11 c0       	rjmp	.+34     	; 0x362 <__floatsisf+0x6a>
 340:	77 23       	and	r23, r23
 342:	21 f0       	breq	.+8      	; 0x34c <__floatsisf+0x54>
 344:	9e e8       	ldi	r25, 0x8E	; 142
 346:	87 2f       	mov	r24, r23
 348:	76 2f       	mov	r23, r22
 34a:	05 c0       	rjmp	.+10     	; 0x356 <__floatsisf+0x5e>
 34c:	66 23       	and	r22, r22
 34e:	71 f0       	breq	.+28     	; 0x36c <__floatsisf+0x74>
 350:	96 e8       	ldi	r25, 0x86	; 134
 352:	86 2f       	mov	r24, r22
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	2a f0       	brmi	.+10     	; 0x364 <__floatsisf+0x6c>
 35a:	9a 95       	dec	r25
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	88 1f       	adc	r24, r24
 362:	da f7       	brpl	.-10     	; 0x35a <__floatsisf+0x62>
 364:	88 0f       	add	r24, r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	97 f9       	bld	r25, 7
 36c:	08 95       	ret

0000036e <__fp_inf>:
 36e:	97 f9       	bld	r25, 7
 370:	9f 67       	ori	r25, 0x7F	; 127
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	08 95       	ret

0000037a <__fp_nan>:
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	80 ec       	ldi	r24, 0xC0	; 192
 37e:	08 95       	ret

00000380 <__fp_pscA>:
 380:	00 24       	eor	r0, r0
 382:	0a 94       	dec	r0
 384:	16 16       	cp	r1, r22
 386:	17 06       	cpc	r1, r23
 388:	18 06       	cpc	r1, r24
 38a:	09 06       	cpc	r0, r25
 38c:	08 95       	ret

0000038e <__fp_pscB>:
 38e:	00 24       	eor	r0, r0
 390:	0a 94       	dec	r0
 392:	12 16       	cp	r1, r18
 394:	13 06       	cpc	r1, r19
 396:	14 06       	cpc	r1, r20
 398:	05 06       	cpc	r0, r21
 39a:	08 95       	ret

0000039c <__fp_round>:
 39c:	09 2e       	mov	r0, r25
 39e:	03 94       	inc	r0
 3a0:	00 0c       	add	r0, r0
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__fp_round+0xc>
 3a4:	88 23       	and	r24, r24
 3a6:	52 f0       	brmi	.+20     	; 0x3bc <__fp_round+0x20>
 3a8:	bb 0f       	add	r27, r27
 3aa:	40 f4       	brcc	.+16     	; 0x3bc <__fp_round+0x20>
 3ac:	bf 2b       	or	r27, r31
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <__fp_round+0x18>
 3b0:	60 ff       	sbrs	r22, 0
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <__fp_round+0x20>
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <__fp_split3>:
 3be:	57 fd       	sbrc	r21, 7
 3c0:	90 58       	subi	r25, 0x80	; 128
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	59 f0       	breq	.+22     	; 0x3de <__fp_splitA+0x10>
 3c8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <__fp_splitA+0x1a>
 3cc:	47 95       	ror	r20

000003ce <__fp_splitA>:
 3ce:	88 0f       	add	r24, r24
 3d0:	97 fb       	bst	r25, 7
 3d2:	99 1f       	adc	r25, r25
 3d4:	61 f0       	breq	.+24     	; 0x3ee <__fp_splitA+0x20>
 3d6:	9f 3f       	cpi	r25, 0xFF	; 255
 3d8:	79 f0       	breq	.+30     	; 0x3f8 <__fp_splitA+0x2a>
 3da:	87 95       	ror	r24
 3dc:	08 95       	ret
 3de:	12 16       	cp	r1, r18
 3e0:	13 06       	cpc	r1, r19
 3e2:	14 06       	cpc	r1, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	f2 cf       	rjmp	.-28     	; 0x3cc <__fp_split3+0xe>
 3e8:	46 95       	lsr	r20
 3ea:	f1 df       	rcall	.-30     	; 0x3ce <__fp_splitA>
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <__fp_splitA+0x30>
 3ee:	16 16       	cp	r1, r22
 3f0:	17 06       	cpc	r1, r23
 3f2:	18 06       	cpc	r1, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	f1 cf       	rjmp	.-30     	; 0x3da <__fp_splitA+0xc>
 3f8:	86 95       	lsr	r24
 3fa:	71 05       	cpc	r23, r1
 3fc:	61 05       	cpc	r22, r1
 3fe:	08 94       	sec
 400:	08 95       	ret

00000402 <__fp_zero>:
 402:	e8 94       	clt

00000404 <__fp_szero>:
 404:	bb 27       	eor	r27, r27
 406:	66 27       	eor	r22, r22
 408:	77 27       	eor	r23, r23
 40a:	cb 01       	movw	r24, r22
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret

00000410 <__mulsf3>:
 410:	0e 94 1b 02 	call	0x436	; 0x436 <__mulsf3x>
 414:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__fp_round>
 418:	0e 94 c0 01 	call	0x380	; 0x380 <__fp_pscA>
 41c:	38 f0       	brcs	.+14     	; 0x42c <__mulsf3+0x1c>
 41e:	0e 94 c7 01 	call	0x38e	; 0x38e <__fp_pscB>
 422:	20 f0       	brcs	.+8      	; 0x42c <__mulsf3+0x1c>
 424:	95 23       	and	r25, r21
 426:	11 f0       	breq	.+4      	; 0x42c <__mulsf3+0x1c>
 428:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_inf>
 42c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_nan>
 430:	11 24       	eor	r1, r1
 432:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_szero>

00000436 <__mulsf3x>:
 436:	0e 94 df 01 	call	0x3be	; 0x3be <__fp_split3>
 43a:	70 f3       	brcs	.-36     	; 0x418 <__mulsf3+0x8>

0000043c <__mulsf3_pse>:
 43c:	95 9f       	mul	r25, r21
 43e:	c1 f3       	breq	.-16     	; 0x430 <__mulsf3+0x20>
 440:	95 0f       	add	r25, r21
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	55 1f       	adc	r21, r21
 446:	62 9f       	mul	r22, r18
 448:	f0 01       	movw	r30, r0
 44a:	72 9f       	mul	r23, r18
 44c:	bb 27       	eor	r27, r27
 44e:	f0 0d       	add	r31, r0
 450:	b1 1d       	adc	r27, r1
 452:	63 9f       	mul	r22, r19
 454:	aa 27       	eor	r26, r26
 456:	f0 0d       	add	r31, r0
 458:	b1 1d       	adc	r27, r1
 45a:	aa 1f       	adc	r26, r26
 45c:	64 9f       	mul	r22, r20
 45e:	66 27       	eor	r22, r22
 460:	b0 0d       	add	r27, r0
 462:	a1 1d       	adc	r26, r1
 464:	66 1f       	adc	r22, r22
 466:	82 9f       	mul	r24, r18
 468:	22 27       	eor	r18, r18
 46a:	b0 0d       	add	r27, r0
 46c:	a1 1d       	adc	r26, r1
 46e:	62 1f       	adc	r22, r18
 470:	73 9f       	mul	r23, r19
 472:	b0 0d       	add	r27, r0
 474:	a1 1d       	adc	r26, r1
 476:	62 1f       	adc	r22, r18
 478:	83 9f       	mul	r24, r19
 47a:	a0 0d       	add	r26, r0
 47c:	61 1d       	adc	r22, r1
 47e:	22 1f       	adc	r18, r18
 480:	74 9f       	mul	r23, r20
 482:	33 27       	eor	r19, r19
 484:	a0 0d       	add	r26, r0
 486:	61 1d       	adc	r22, r1
 488:	23 1f       	adc	r18, r19
 48a:	84 9f       	mul	r24, r20
 48c:	60 0d       	add	r22, r0
 48e:	21 1d       	adc	r18, r1
 490:	82 2f       	mov	r24, r18
 492:	76 2f       	mov	r23, r22
 494:	6a 2f       	mov	r22, r26
 496:	11 24       	eor	r1, r1
 498:	9f 57       	subi	r25, 0x7F	; 127
 49a:	50 40       	sbci	r21, 0x00	; 0
 49c:	9a f0       	brmi	.+38     	; 0x4c4 <__mulsf3_pse+0x88>
 49e:	f1 f0       	breq	.+60     	; 0x4dc <__mulsf3_pse+0xa0>
 4a0:	88 23       	and	r24, r24
 4a2:	4a f0       	brmi	.+18     	; 0x4b6 <__mulsf3_pse+0x7a>
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	bb 1f       	adc	r27, r27
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	50 40       	sbci	r21, 0x00	; 0
 4b4:	a9 f7       	brne	.-22     	; 0x4a0 <__mulsf3_pse+0x64>
 4b6:	9e 3f       	cpi	r25, 0xFE	; 254
 4b8:	51 05       	cpc	r21, r1
 4ba:	80 f0       	brcs	.+32     	; 0x4dc <__mulsf3_pse+0xa0>
 4bc:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_inf>
 4c0:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_szero>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	e4 f3       	brlt	.-8      	; 0x4c0 <__mulsf3_pse+0x84>
 4c8:	98 3e       	cpi	r25, 0xE8	; 232
 4ca:	d4 f3       	brlt	.-12     	; 0x4c0 <__mulsf3_pse+0x84>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	e7 95       	ror	r30
 4d8:	9f 5f       	subi	r25, 0xFF	; 255
 4da:	c1 f7       	brne	.-16     	; 0x4cc <__mulsf3_pse+0x90>
 4dc:	fe 2b       	or	r31, r30
 4de:	88 0f       	add	r24, r24
 4e0:	91 1d       	adc	r25, r1
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret

000004ea <__divmodsi4>:
 4ea:	05 2e       	mov	r0, r21
 4ec:	97 fb       	bst	r25, 7
 4ee:	16 f4       	brtc	.+4      	; 0x4f4 <__divmodsi4+0xa>
 4f0:	00 94       	com	r0
 4f2:	0f d0       	rcall	.+30     	; 0x512 <__negsi2>
 4f4:	57 fd       	sbrc	r21, 7
 4f6:	05 d0       	rcall	.+10     	; 0x502 <__divmodsi4_neg2>
 4f8:	1e d0       	rcall	.+60     	; 0x536 <__udivmodsi4>
 4fa:	07 fc       	sbrc	r0, 7
 4fc:	02 d0       	rcall	.+4      	; 0x502 <__divmodsi4_neg2>
 4fe:	46 f4       	brtc	.+16     	; 0x510 <__divmodsi4_exit>
 500:	08 c0       	rjmp	.+16     	; 0x512 <__negsi2>

00000502 <__divmodsi4_neg2>:
 502:	50 95       	com	r21
 504:	40 95       	com	r20
 506:	30 95       	com	r19
 508:	21 95       	neg	r18
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	4f 4f       	sbci	r20, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255

00000510 <__divmodsi4_exit>:
 510:	08 95       	ret

00000512 <__negsi2>:
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__muluhisi3>:
 522:	2b d0       	rcall	.+86     	; 0x57a <__umulhisi3>
 524:	a5 9f       	mul	r26, r21
 526:	90 0d       	add	r25, r0
 528:	b4 9f       	mul	r27, r20
 52a:	90 0d       	add	r25, r0
 52c:	a4 9f       	mul	r26, r20
 52e:	80 0d       	add	r24, r0
 530:	91 1d       	adc	r25, r1
 532:	11 24       	eor	r1, r1
 534:	08 95       	ret

00000536 <__udivmodsi4>:
 536:	a1 e2       	ldi	r26, 0x21	; 33
 538:	1a 2e       	mov	r1, r26
 53a:	aa 1b       	sub	r26, r26
 53c:	bb 1b       	sub	r27, r27
 53e:	fd 01       	movw	r30, r26
 540:	0d c0       	rjmp	.+26     	; 0x55c <__udivmodsi4_ep>

00000542 <__udivmodsi4_loop>:
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	ee 1f       	adc	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	a2 17       	cp	r26, r18
 54c:	b3 07       	cpc	r27, r19
 54e:	e4 07       	cpc	r30, r20
 550:	f5 07       	cpc	r31, r21
 552:	20 f0       	brcs	.+8      	; 0x55c <__udivmodsi4_ep>
 554:	a2 1b       	sub	r26, r18
 556:	b3 0b       	sbc	r27, r19
 558:	e4 0b       	sbc	r30, r20
 55a:	f5 0b       	sbc	r31, r21

0000055c <__udivmodsi4_ep>:
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	1a 94       	dec	r1
 566:	69 f7       	brne	.-38     	; 0x542 <__udivmodsi4_loop>
 568:	60 95       	com	r22
 56a:	70 95       	com	r23
 56c:	80 95       	com	r24
 56e:	90 95       	com	r25
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
 574:	bd 01       	movw	r22, r26
 576:	cf 01       	movw	r24, r30
 578:	08 95       	ret

0000057a <__umulhisi3>:
 57a:	a2 9f       	mul	r26, r18
 57c:	b0 01       	movw	r22, r0
 57e:	b3 9f       	mul	r27, r19
 580:	c0 01       	movw	r24, r0
 582:	a3 9f       	mul	r26, r19
 584:	01 d0       	rcall	.+2      	; 0x588 <__umulhisi3+0xe>
 586:	b2 9f       	mul	r27, r18
 588:	70 0d       	add	r23, r0
 58a:	81 1d       	adc	r24, r1
 58c:	11 24       	eor	r1, r1
 58e:	91 1d       	adc	r25, r1
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
